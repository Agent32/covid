{"version":3,"sources":["components/pages/mainCounrtyList/countryListStyle.module.scss","api/api.ts","store/countryListReducer.ts","store/store.ts","components/formSettings.ts","components/pages/mainCounrtyList/mainCountryListDrawer.tsx","components/pages/mainCounrtyList/mainCountryListContainer.tsx","store/actions/countryListActions.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","instanceMock","axios","create","baseURL","serverAL","get","then","res","data","Countries","_","require","init","ID","Country","CountryCode","Slug","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","Date","Premium","mainCounrtySettings","test","countryListReducer","state","action","type","answ","orderBy","c","whatSort","direction","value","reducersPush","combineReducers","countiesCovidPart","store","createStore","applyMiddleware","thunk","inputCondition","max","length","undefined","min","MainCountryListDrawer","props","useState","sort","setSort","changeSort","isWindowOpen","setWindowsStatus","listNumb","setListNumb","listDeath","setListDeath","listRecovered","setListRecovered","listName","setlistName","TitleDrawer","className","countryListStyle","title","numb","countr","onClick","sortCountriesData","confirm","inputForSort","setInputForSort","inputArea","React","createRef","listCountryDrawer","filter","toLowerCase","includes","map","current","count","column","main","popGeneral","popWindow","autoFocus","heading","src","alt","InputGroup","Prepend","Text","id","FormControl","placeholder","aria-label","aria-describedby","ref","onChange","table","MainCountryListContainer","connect","getCountriesListTC","dispatch","a","newsAnswData","console","log","connector","useEffect","App","exact","from","to","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81c32dff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"countryListStyle_main__24O-k\",\"heading\":\"countryListStyle_heading__33YUT\",\"table\":\"countryListStyle_table__Cu3Q8\",\"title\":\"countryListStyle_title__17A5d\",\"numb\":\"countryListStyle_numb__3J-b3\",\"countr\":\"countryListStyle_countr__1Y82v\",\"confirm\":\"countryListStyle_confirm__3LVPY\",\"column\":\"countryListStyle_column__2EVQs\",\"popGeneral\":\"countryListStyle_popGeneral__3G7fs\",\"popWindow\":\"countryListStyle_popWindow__3Jk_y\"};","import axios from 'axios';\r\nimport { serverResponse } from '../store/types/storeTypes';\r\n\r\n//import { invoiceType } from '../store/types/storeTypes';\r\n\r\nconst instanceMock = axios.create({\r\n  baseURL: \"https://api.covid19api.com/summary\",\r\n});\r\n\r\n//https://www.fakeapi.online/apis\r\n\r\ntype serverType = {\r\n  getCountiesCovidList: Function\r\n}\r\n\r\nexport const serverAL: serverType = {\r\n  getCountiesCovidList: () => {\r\n    return instanceMock\r\n      .get<serverResponse>(``)\r\n\r\n      .then((res) => {\r\n        return res.data.Countries;\r\n      });\r\n  },\r\n\r\n};","\r\nimport { mainCountryListType, countriesStatCovidType } from './types/storeTypes'\r\n\r\nimport * as actions from './actions/countryListActions'\r\nimport { Dispatch } from 'react'\r\nimport { serverAL } from '../api/api'\r\nconst _ = require(\"lodash\");\r\n\r\ntype getOnlyActionTypes<T> = T extends { [key: string]: infer U } ? U : never\r\ntype ActionTypesM = ReturnType<getOnlyActionTypes<typeof actions>>\r\n\r\nconst init: mainCountryListType = {\r\n  Countries: [\r\n    {\r\n      ID: 'load',\r\n      Country: 'load',\r\n      CountryCode: 'load',\r\n      Slug: 'load',\r\n      NewConfirmed: 1,\r\n      TotalConfirmed: 1,\r\n      NewDeaths: 1,\r\n      TotalDeaths: 1,\r\n      NewRecovered: 1,\r\n      TotalRecovered: 1,\r\n      Date: 'load',\r\n      Premium: null,\r\n    },\r\n  ],\r\n  mainCounrtySettings: {\r\n    test: 'load',\r\n  },\r\n}\r\n// ========================================\r\n//const answ= _(state.Countries).sortBy((c:countriesStatCovidType) =>c.ID, 'desc')\r\n//\r\nfunction countryListReducer(\r\n  state: mainCountryListType = init,\r\n  action: ActionTypesM\r\n): mainCountryListType {\r\n  switch (action.type) {\r\n    // --------------\r\n\r\n    case 'SET-COUNTRY-LIST/countryCovidPage': {\r\n      return {\r\n        ...state,\r\n        Countries: [...action.data],\r\n      }\r\n    }\r\n    case 'SORT-COUNTIES-DATA/countryCovidPage': {\r\n      const answ = _(state.Countries).orderBy((c:any) =>c[action.whatSort] , action.direction).value()\r\n      return {\r\n        ...state,\r\n        Countries: [...answ],\r\n      }\r\n    }\r\n \r\n\r\n    // --------------\r\n    default:\r\n      return state\r\n  }\r\n}\r\n// ========================================\r\n\r\n// ========================================\r\nexport const getCountriesListTC =\r\n  () => async (dispatch: Dispatch<ActionTypesM>) => {\r\n    try {\r\n      const newsAnswData = await serverAL.getCountiesCovidList()\r\n      dispatch(actions.setCountriesChange(newsAnswData))\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n// ---------------------------------------\r\n/* export const sendNewInvoiceTC = (data: invoiceType) => async (dispatch: ActionTypesM) => {\r\n  try {\r\n\r\n    const newsAnswData: invoiceType = await serverAL.newInvoice(data);\r\n    dispatch(pushNewInvoice(newsAnswData))\r\n    dispatch(changeShowingPanel())\r\n\r\n  } catch (err) {\r\n    console.log(err); //redirect-eror-page\r\n  }\r\n}; */\r\n\r\n// ========================================\r\nexport default countryListReducer\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\n\r\nimport thunk from 'redux-thunk' //thunk middleware\r\nimport countryListReducer from './countryListReducer'\r\n\r\nconst reducersPush = combineReducers({\r\n  countiesCovidPart: countryListReducer,\r\n \r\n})\r\n\r\nexport type globalStateType = ReturnType<typeof reducersPush>\r\n\r\nconst store = createStore(reducersPush, applyMiddleware(thunk))\r\nexport default store\r\n","export const inputCondition = {\r\n  required: (value: number) => {\r\n    return value || typeof value === \"number\" ? undefined : \"Required\";\r\n  },\r\n  maxLength: (max: number) => (value: Array<string>) => {\r\n    return value && value.length > max ? `Max is ${max}` : undefined;\r\n  },\r\n  minLength: (min: number) => (value: Array<string>) =>\r\n    value && value.length < min ? `Min is ${min}` : undefined,\r\n  number: (value: number) =>\r\n    value && isNaN(Number(value)) ? \"Must be a numb\" : undefined,\r\n  minValue: (min: number) => (value: number) =>\r\n    value && value < min ? `Must be at least ${min}` : undefined,\r\n  email: (value: string) =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n      ? \"Invalid email\"\r\n      : undefined,\r\n};","\r\nimport countryListStyle from \"./countryListStyle.module.scss\";\r\nimport { countriesListConectedType } from \"./mainCountryListContainer\";\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { InputGroup, FormControl } from 'react-bootstrap'; \r\nimport { inputCondition } from \"../../formSettings\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst _ = require(\"lodash\");\r\n\r\nconst maxLength20 = inputCondition.maxLength(20);\r\nconst minLength1 = inputCondition.minLength(1);\r\n\r\nconst MainCountryListDrawer = (props: countriesListConectedType) => {\r\n\r\n  \r\n\r\n  //-------------------------sort--------------------------------\r\n  type switchType = 'asc' | 'desc'\r\n  const [sort, setSort] = useState<switchType>('desc');\r\n\r\n  const changeSort = () => {\r\n    sort === 'asc' ? setSort('desc') : setSort('asc')\r\n  }\r\n  //-------------------------/sort--------------------------------\r\n  //-------------------------PopUpWindow--------------------------------\r\n\r\n  const [isWindowOpen, setWindowsStatus] = useState<boolean>(false);\r\n  const [listNumb, setListNumb] = useState<number>(1);\r\n  const [listDeath, setListDeath] = useState<number>(1);\r\n  const [listRecovered, setListRecovered] = useState<number>(1);\r\n  const [listName, setlistName] = useState<string>('');\r\n\r\n  const popWindow = () => {\r\n    return (\r\n      <div className={countryListStyle.popGeneral}>\r\n        <div className={countryListStyle.popWindow}>\r\n          <h3> {listName}</h3>\r\n          <div> Total Confirmed: {listNumb} </div>\r\n          <div> Total Death:  {listDeath} </div>\r\n          <div> Total Recovered:  {listRecovered} </div>\r\n          <button autoFocus={true} onClick={() => setWindowsStatus(false)}> OK </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  //-------------------------/PopUpWindow--------------------------------\r\n\r\n  //-------------------------drawers--------------------------------\r\n  const TitleDrawer = () => (\r\n    <div className={countryListStyle.title}>\r\n      <span className={countryListStyle.numb}> №</span>  <span\r\n        className={countryListStyle.countr}\r\n        onClick={() => {\r\n          props.sortCountriesData(\"Country\", sort)\r\n          changeSort()\r\n        }} >Country</span>\r\n      <span\r\n        className={countryListStyle.confirm}\r\n        onClick={() => {\r\n          props.sortCountriesData(\"TotalConfirmed\", sort)\r\n          changeSort()\r\n        }}\r\n      > Total Confirmed </span>\r\n    </div>\r\n  );\r\n\r\n  //-----------------------------------searchPart--------------------------------------\r\n  const [inputForSort, setInputForSort] = useState<string>('');\r\n  let inputArea = React.createRef<HTMLInputElement>();\r\n  let tempHolder = props.Countries\r\n  if (inputForSort === '') { tempHolder = props.Countries }\r\n  else {\r\n    tempHolder = _(props.Countries).filter((c: any) => c.Country.toLowerCase().includes(inputForSort.toLowerCase())).value()\r\n  } \r\n  //-----------------------------------/searchPart--------------------------------------\r\n  const listCountryDrawer = tempHolder.map((current, count) => {\r\n    return (\r\n      <div className={countryListStyle.column} key={current.ID}\r\n        onClick={() => {\r\n          setWindowsStatus(true)\r\n          setlistName(current.Country)\r\n          setListNumb(current.TotalConfirmed)\r\n          setListDeath(current.TotalDeaths)\r\n          setListRecovered(current.TotalRecovered)\r\n        }}>\r\n        <span className={countryListStyle.numb}> {++count} </span>\r\n        <span className={countryListStyle.countr}>{current.Country}</span>\r\n        <span className={countryListStyle.confirm}>{current.TotalConfirmed}</span>\r\n      </div >\r\n    )\r\n  }) \r\n  //-------------------------/drawers--------------------------------\r\n\r\n  return (\r\n    <div className={countryListStyle.main}>\r\n      {isWindowOpen ? popWindow() : null}\r\n\r\n      <div className={countryListStyle.heading}>\r\n        <div>\r\n          <img src={`https://images.squarespace-cdn.com/content/v1/5bab98d9f4e53108da59ae49/1587412249763-N5N5IV5KMEMBX7MUB3YW/ke17ZwdGBToddI8pDm48kFNvRL7UXJaJcEmxyIQKNI5Zw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZamWLI2zvYWH8K3-s_4yszcp2ryTI0HqTOaaUohrI8PId-GWN52DlBH0oMtMvXjp29I0ICWpqmL8n0hrhvsfz28/covid19_icon.png`} alt='coronaPic' />\r\n          <h1>STATISTIC</h1>\r\n        </div>\r\n        <div>\r\n     \r\n   <InputGroup className=\"mb-3\">\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text id=\"basic-addon1\">🔎</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <FormControl\r\n      placeholder=\"Search\"\r\n      aria-label=\"Search\"\r\n              aria-describedby=\"Input text to search\"\r\n              ref={inputArea}\r\n              value={inputForSort}\r\n              onChange={() => inputArea.current !== null ? setInputForSort(inputArea.current.value) : ''}\r\n    />\r\n  </InputGroup>\r\n        </div>\r\n      </div>\r\n\r\n   \r\n\r\n      <div className={countryListStyle.table}>\r\n\r\n        <TitleDrawer />\r\n        {listCountryDrawer}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainCountryListDrawer;\r\n","import { useEffect } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { sortCountriesData } from \"../../../store/actions/countryListActions\";\r\nimport { getCountriesListTC } from \"../../../store/countryListReducer\";\r\nimport { globalStateType } from \"../../../store/store\";\r\nimport MainCountryListDrawer from './mainCountryListDrawer'\r\n\r\nconst mapStateToProps = (state: globalStateType) => {\r\n  return {\r\n    Countries: state.countiesCovidPart.Countries,\r\n    mainCounrtySettings: state.countiesCovidPart.mainCounrtySettings\r\n  }\r\n};\r\n\r\nconst connector = connect(mapStateToProps, { getCountriesListTC, sortCountriesData })\r\nexport type countriesListConectedType = ConnectedProps<typeof connector>\r\n\r\nfunction MainCountryListContainerConnect(props: countriesListConectedType) {\r\n\r\n  useEffect(() => {\r\n    props.getCountriesListTC();\r\n  }, []);\r\n\r\n\r\n\r\n  return <MainCountryListDrawer {...props} />;\r\n}\r\n\r\n// ========================================\r\n\r\n\r\nconst MainCountryListContainer = connector(MainCountryListContainerConnect);\r\n\r\nexport default MainCountryListContainer;\r\n","import { countriesStatCovidType } from '../types/storeTypes'\r\n\r\nexport const setCountriesChange = (data:Array <countriesStatCovidType>) => ({\r\n  type: 'SET-COUNTRY-LIST/countryCovidPage',\r\n  data\r\n}as const)\r\n// --------------\r\n\r\n\r\nexport const sortCountriesData = (whatSort:'Country'|'TotalConfirmed', direction:'asc'|'desc') => ({\r\n  type: 'SORT-COUNTIES-DATA/countryCovidPage',\r\n  whatSort,\r\n  direction\r\n}as const)\r\n\r\n","import \"./App.css\";\nimport MainCountryListContainer from \"./components/pages/mainCounrtyList/mainCountryListContainer\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/countries\" />\n\n\n        <Route path=\"/countries\" component={MainCountryListContainer} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport store from './store/store'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}